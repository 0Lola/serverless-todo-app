service:
  name: serverless-todo-app-zxa011023

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-offline
  - serverless-plugin-canary-deployments

provider:

  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x
  environment:
    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'us-east-1'}
    TODO_TABLE: Todo
    USER_ID_INDEX: UserIdIndex
    IMAGE_TABLE: Image
    IMAGE_BUCKET: serverless-s3-images-zxa011023
    IMAGE_ID_INDEX: ImageIdIndex
    SIGNED_URL_EXPIRATION: 3000
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
    # - Effect: Allow
    #   Action:
    #     - dynamodb:PutItem
    #     - dynamodb:Query
    #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}
    # - Effect: Allow
    #   Action:
    #     - dynamodb:Query
    #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}
    # - Effect: Allow
    #   Action:
    #     - s3:PutObject
    #     - s3:GetObject
    #   Resource: arn:aws:s3:::${self:provider.environment.IMAGE_BUCKET}/*
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Auth0Secret
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: !GetAtt KMSKey.Arn

custom:
  topicName: ServerlessTodoTopic
  serverless-offline:
    port: 3003
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless REST API
        description: Serverless application for REST API
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(src/validation/create-todo-request.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(src/validation/update-todo-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    # iamRoleStatements:
    #   - Effect: Allow
    #     Action:
    #       - dynamodb:Query
    #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Todo
            description: Create a new Todo
            requestModels:
              'application/json': CreateTodoRequest
    # iamRoleStatements:
    #   - Effect: Allow
    #     Action:
    #       - dynamodb:PutItem
    #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}


  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a new Todo
            description: Update a new Todo
            requestModels:
              'application/json': UpdateTodoRequest
    # iamRoleStatements:
    #   - Effect: Allow
    #     Action:
    #       - dynamodb:UpdateItem
    #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
          # reqValidatorName: RequestBodyValidator
          # documentation:
          #   summary: Update a Todo
          #   description: Update a Todo
          #   requestModels:
          #     'application/json': UpdateTodoRequest

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    # iamRoleStatements:
    #   - Effect: Allow
    #     Action:
    #       - dynamodb:DeleteItem
    #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    # iamRoleStatements:
    #   - Effect: Allow
    #     Action:
    #       - dynamodb:UpdateItem
    #       - dynamodb:GetItem
    #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
    #   - Effect: Allow
    #     Action:
    #       - dynamodb:PutItem
    #       - dynamodb:Query
    #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}
    #   - Effect: Allow
    #     Action:
    #       - s3:PutObject
    #       - s3:GetObject
    #     Resource: arn:aws:s3:::${self:provider.environment.IMAGE_BUCKET}/*

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: dueDate
            AttributeType: S
          - AttributeName: done
            AttributeType: BOOL
          - AttributeName: attachmentUrl
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.TODO_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    # ImageDynamoDBTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     AttributeDefinitions:
    #       - AttributeName: id
    #         AttributeType: S
    #       - AttributeName: timestamp
    #         AttributeType: S
    #       - AttributeName: imageId
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: id
    #         KeyType: HASH
    #       - AttributeName: timestamp
    #         KeyType: RANGE
    #     BillingMode: PAY_PER_REQUEST
    #     StreamSpecification:
    #       StreamViewType: NEW_IMAGE
    #     TableName: ${self:provider.environment.IMAGE_TABLE}
    #     GlobalSecondaryIndexes:
    #       - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
    #         KeySchema:
    #         - AttributeName: imageId
    #           KeyType: HASH
    #         Projection:
    #           ProjectionType: ALL

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.IMAGE_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ServerlessTodoTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGE_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ServerlessTodoTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGE_BUCKET}
        Topics:
          - !Ref ServerlessTodoTopic

    ServerlessTodoTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Serverless Bucket Topic
        TopicName: ${self:custom.topicName}

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-serverless-auth0
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey